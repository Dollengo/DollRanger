name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
              -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
              -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

  check_commits:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Count commits since last release
      id: commit_count
      run: |
        latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null)
        if [ -z "$latest_tag" ]; then
          echo "commit_count=10" >> $GITHUB_OUTPUT
        else
          commit_count=$(git rev-list $latest_tag..HEAD --count)
          echo "commit_count=$commit_count" >> $GITHUB_OUTPUT
        fi
      shell: bash

  release:
    if: needs.check_commits.outputs.commit_count == '10'
    runs-on: ubuntu-latest
    needs: check_commits
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Bump version
      id: bump_version
      run: |
        latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
        if [ -z "$latest_tag" ]; then
          latest_tag="v0.0.0"
        fi
        echo "Latest tag: $latest_tag"

        IFS='.' read -r -a version_parts <<< "${latest_tag#v}"

        if [ "${version_parts[2]}" -lt 99 ]; then
          version_parts[2]=$((version_parts[2] + 1))
        else
          version_parts[2]=0
          if [ "${version_parts[1]}" -lt 99 ]; then
            version_parts[1]=$((version_parts[1] + 1))
          else
            version_parts[1]=0
            version_parts[0]=$((version_parts[0] + 1))
          fi
        fi

        new_version="v${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"
        echo "New version: $new_version"

        echo "new_version=$new_version" >> $GITHUB_ENV
        echo "new_version=$new_version" >> $GITHUB_OUTPUT

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.new_version }}
        release_name: DollRanger: ${{ env.new_version }}
        body: |
          Changelog: [Commits](https://github.com/${{ github.repository }}/commits/main)
        draft: false
        prerelease: false

    - name: Upload release assets (tar.gz)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/build/DollRanger-${{ env.new_version }}-x64.tar.gz
        asset_name: DollRanger-${{ env.new_version }}-x64.tar.gz
        asset_content_type: application/gzip

    - name: Upload release assets (zip)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/build/DollRanger-${{ env.new_version }}-x64.zip
        asset_name: DollRanger-${{ env.new_version }}-x64.zip
        asset_content_type: application/zip

