name: Build and Release CMake

on:
  push:
    branches:
      - 'thirdfeatures/**'  # Triggers the workflow for branches starting with 'thirdfeatures/'
  pull_request:
    branches:
      - 'thirdfeatures/**'  # Triggers the workflow for pull requests targeting branches starting with 'thirdfeatures/'
  workflow_dispatch:  # Allows manual triggering of the workflow
    inputs:
      feature_name:
        description: 'Name of the feature for the branch'
        required: true
        default: 'default-feature'
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up CMake
      run: |
        cmake --version
        cmake -B build -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S .

    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }}

    - name: Test
      working-directory: build
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Upload build artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: build/

    - name: Check for vulnerabilities
      run: |
        echo "Checking for vulnerabilities..."
        snyk test --all-projects
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Notify on failure
      if: failure()
      run: |
        echo "Build or tests failed! Notify team and check logs for details."
      env:
        NOTIFICATION_API_KEY: ${{ secrets.NOTIFICATION_API_KEY }}

    - name: Clean up
      if: always()
      run: |
        echo "Cleaning up..."
        rm -rf build/
